#!/bin/bash
# SPDX-License-Identifier: SPDX-License-Identifier: MPL-2.0
#
# Copyright (c) 2023 Thomas Mittelstaedt <thomas.mittelstaedt@de.bosch.com>

VERSION=2.00
VERSIONDATE=2023

SHORT=hp:m:vr:ulf
LONG=help,path:,mountpoint:,verbose,profile:,umount,version,last,fstab

if [ -n "$SUDO_USER" ]; then
  PROFILEBASES=("${HOME}/.config/mountimage" "/home/${SUDO_USER}/.config/mountimage" "/etc/mountimage")
else
  PROFILEBASES=("${HOME}/.config/mountimage" "/etc/mountimage")
fi

PROGNAME=$(basename $0)

#######################################
# Stores the parameter -r and -m to store a profile "last"
# Can be used to set up new profiles
#######################################
CMD_LAST_PARAMETERS=()

#######################################
# Stores all -p|--path parameters from command line and included profiles
#######################################
CMD_PATH_DESCRIPTORS=()

#######################################
# Stores the used mountpoint for "/" (root) (-m|--mountpoint)
#######################################
CMD_MOUNTPOINT=

#######################################
# Is set to 'y' to enable additional logs
#######################################
CMD_VERBOSE_OPTION_SET=

#######################################
# Is set to used image / device from command line to setup a file system
#######################################
CMD_IMAGE_DEVICE=

#######################################
# Is set to 'y', when the mounted file system shall be unmounted
# before further activities
#######################################
CMD_UMOUNT_OPTION_SET='n'

#######################################
# Is set to 'y', if option "-l|--last" is set
#######################################
CMD_PRINT_LAST_OPTION_SET=

#######################################
# Is used to prevent recursion overflows while loading profiles
# A profile name can only be loaded one
#######################################
declare -A LOADED_PROFILES

#######################################
# Is used to identify partitions used as root file system
#######################################

declare -A ROOT_GUID_TABLE

ROOT_GUID_TABLE=( \
  [6523f8ae-3eb1-4e2a-a05a-18b695ae656f]='SD_GPT_ROOT_ALPHA' \
  [d27f46ed-2919-4cb8-bd25-9531f3c16534]='SD_GPT_ROOT_ARC' \
  [69dad710-2ce4-4e3c-b16c-21a1d49abed3]='SD_GPT_ROOT_ARM' \
  [b921b045-1df0-41c3-af44-4c6f280d3fae]='SD_GPT_ROOT_ARM64' \
  [993d8d3d-f80e-4225-855a-9daf8ed7ea97]='SD_GPT_ROOT_IA64' \
  [77055800-792c-4f94-b39a-98c91b762bb6]='SD_GPT_ROOT_LOONGARCH64' \
  [37c58c8a-d913-4156-a25f-48b1b64e07f0]='SD_GPT_ROOT_MIPS_LE' \
  [700bda43-7a34-4507-b179-eeb93d7a7ca3]='SD_GPT_ROOT_MIPS64_LE' \
  [1aacdb3b-5444-4138-bd9e-e5c2239b2346]='SD_GPT_ROOT_PARISC' \
  [1de3f1ef-fa98-47b5-8dcd-4a860a654d78]='SD_GPT_ROOT_PPC' \
  [912ade1d-a839-4913-8964-a10eee08fbd2]='SD_GPT_ROOT_PPC64' \
  [c31c45e6-3f39-412e-80fb-4809c4980599]='SD_GPT_ROOT_PPC64_LE' \
  [60d5a7fe-8e7d-435c-b714-3dd8162144e1]='SD_GPT_ROOT_RISCV32' \
  [72ec70a6-cf74-40e6-bd49-4bda08e8f224]='SD_GPT_ROOT_RISCV64' \
  [08a7acea-624c-4a20-91e8-6e0fa67d23f9]='SD_GPT_ROOT_S390' \
  [5eead9a9-fe09-4a1e-a1d7-520d00531306]='SD_GPT_ROOT_S390X' \
  [c50cdd70-3862-4cc3-90e1-809a8c93ee2c]='SD_GPT_ROOT_TILEGX' \
  [44479540-f297-41b2-9af7-d131d5f0458a]='SD_GPT_ROOT_X86' \
  [4f68bce3-e8cd-4db1-96e7-fbcaf984b709]='SD_GPT_ROOT_X86_64' \
  [fc56d9e9-e6e5-4c06-be32-e74407ce09a5]='SD_GPT_ROOT_ALPHA_VERITY' \
  [24b2d975-0f97-4521-afa1-cd531e421b8d]='SD_GPT_ROOT_ARC_VERITY' \
  [7386cdf2-203c-47a9-a498-f2ecce45a2d6]='SD_GPT_ROOT_ARM_VERITY' \
  [df3300ce-d69f-4c92-978c-9bfb0f38d820]='SD_GPT_ROOT_ARM64_VERITY' \
  [86ed10d5-b607-45bb-8957-d350f23d0571]='SD_GPT_ROOT_IA64_VERITY' \
  [f3393b22-e9af-4613-a948-9d3bfbd0c535]='SD_GPT_ROOT_LOONGARCH64_VERITY' \
  [d7d150d2-2a04-4a33-8f12-16651205ff7b]='SD_GPT_ROOT_MIPS_LE_VERITY' \
  [16b417f8-3e06-4f57-8dd2-9b5232f41aa6]='SD_GPT_ROOT_MIPS64_LE_VERITY' \
  [d212a430-fbc5-49f9-a983-a7feef2b8d0e]='SD_GPT_ROOT_PARISC_VERITY' \
  [906bd944-4589-4aae-a4e4-dd983917446a]='SD_GPT_ROOT_PPC64_LE_VERITY' \
  [9225a9a3-3c19-4d89-b4f6-eeff88f17631]='SD_GPT_ROOT_PPC64_VERITY' \
  [98cfe649-1588-46dc-b2f0-add147424925]='SD_GPT_ROOT_PPC_VERITY' \
  [ae0253be-1167-4007-ac68-43926c14c5de]='SD_GPT_ROOT_RISCV32_VERITY' \
  [b6ed5582-440b-4209-b8da-5ff7c419ea3d]='SD_GPT_ROOT_RISCV64_VERITY' \
  [7ac63b47-b25c-463b-8df8-b4a94e6c90e1]='SD_GPT_ROOT_S390_VERITY' \
  [b325bfbe-c7be-4ab8-8357-139e652d2f6b]='SD_GPT_ROOT_S390X_VERITY' \
  [966061ec-28e4-4b2e-b4a5-1f0a825a1d84]='SD_GPT_ROOT_TILEGX_VERITY' \
  [2c7357ed-ebd2-46d9-aec1-23d437ec2bf5]='SD_GPT_ROOT_X86_64_VERITY' \
  [d13c5d3b-b5d1-422a-b29f-9454fdc89d76]='SD_GPT_ROOT_X86_VERITY' \
  [d46495b7-a053-414f-80f7-700c99921ef8]='SD_GPT_ROOT_ALPHA_VERITY_SIG' \
  [143a70ba-cbd3-4f06-919f-6c05683a78bc]='SD_GPT_ROOT_ARC_VERITY_SIG' \
  [42b0455f-eb11-491d-98d3-56145ba9d037]='SD_GPT_ROOT_ARM_VERITY_SIG' \
  [6db69de6-29f4-4758-a7a5-962190f00ce3]='SD_GPT_ROOT_ARM64_VERITY_SIG' \
  [e98b36ee-32ba-4882-9b12-0ce14655f46a]='SD_GPT_ROOT_IA64_VERITY_SIG' \
  [5afb67eb-ecc8-4f85-ae8e-ac1e7c50e7d0]='SD_GPT_ROOT_LOONGARCH64_VERITY_SIG' \
  [c919cc1f-4456-4eff-918c-f75e94525ca5]='SD_GPT_ROOT_MIPS_LE_VERITY_SIG' \
  [904e58ef-5c65-4a31-9c57-6af5fc7c5de7]='SD_GPT_ROOT_MIPS64_LE_VERITY_SIG' \
  [15de6170-65d3-431c-916e-b0dcd8393f25]='SD_GPT_ROOT_PARISC_VERITY_SIG' \
  [d4a236e7-e873-4c07-bf1d-bf6cf7f1c3c6]='SD_GPT_ROOT_PPC64_LE_VERITY_SIG' \
  [f5e2c20c-45b2-4ffa-bce9-2a60737e1aaf]='SD_GPT_ROOT_PPC64_VERITY_SIG' \
  [1b31b5aa-add9-463a-b2ed-bd467fc857e7]='SD_GPT_ROOT_PPC_VERITY_SIG' \
  [3a112a75-8729-4380-b4cf-764d79934448]='SD_GPT_ROOT_RISCV32_VERITY_SIG' \
  [efe0f087-ea8d-4469-821a-4c2a96a8386a]='SD_GPT_ROOT_RISCV64_VERITY_SIG' \
  [3482388e-4254-435a-a241-766a065f9960]='SD_GPT_ROOT_S390_VERITY_SIG' \
  [c80187a5-73a3-491a-901a-017c3fa953e9]='SD_GPT_ROOT_S390X_VERITY_SIG' \
  [b3671439-97b0-4a53-90f7-2d5a8f3ad47b]='SD_GPT_ROOT_TILEGX_VERITY_SIG' \
  [41092b05-9fc8-4523-994f-2def0408b176]='SD_GPT_ROOT_X86_64_VERITY_SIG' \
  [5996fc05-109c-48de-808b-23fa0830b676]='SD_GPT_ROOT_X86_VERITY_SIG' \
)

#######################################
# Check return code of external commands and exit
# Globals:
#   -
# Arguments:
#   $1 = Return code of called command
#   $2 = Linenr of call at script (optionally)
#######################################
function check_return_code() {
local CMD_RETURN_CODE=$1
local CMD_CALL_LINENR=$2

  if test $CMD_RETURN_CODE -ne 0; then
  local linenr_string;

    if [ -n "$CMD_CALL_LINENR" ]; then
      linenr_string=" at line $CMD_CALL_LINENR"
    fi
    print_error_line "Exiting with print_error_line=${CMD_RETURN_CODE}${linenr_string}"
    exit $CMD_RETURN_CODE
  fi
}

#######################################
# Log verbose messages
# Globals:
#   -
# Arguments:
#   $* : Strings to log
#######################################
function print_verbose_line() {
  if [ -n "$CMD_VERBOSE_OPTION_SET" ]; then
    echo "LOG: $*" 1>&2
  fi
}

#######################################
# Echo log to STDERR
# Globals:
#   -
# Arguments:
#   $* : Strings to log
#######################################
function print_error_line() {
  echo "$(basename $0): $*" >&2
}


#######################################
# Puts help text to STDOUT, but don't exit
# Globals:
#   -
# Arguments:
#   -
#######################################
function print_help () {

cat <<HeredocDelimiter
General:
$PROGNAME has to be started privileged (sudo) to call privileged commands

Usage: $PROGNAME [OPTIONS] IMAGE_FILE|DEVICE
       $PROGNAME -u [MOUNT_OPTIONS|COMMON_OPTIONS] IMAGE_FILE|DEVICE
       $PROGNAME -u [COMMON_OPTIONS] MOUNTPOINT

Mount/Umount a system image file or a block device with loaded system image.

Special hints:
- The program can be called multiple times to add additional sub mounts. At
  image files the same loop device is reused.
- Sub mount are ignored before root (/) is mounted.

Options: Umount options | Mount options | Common options

Umount options:
    -u, --umount            Unmount all partitions at mount point and sub mounts.
                            This flag is handled before processing mount options.

Mount options:
    -p, --path=MDESCR       Description with information of partition and mountpoint
    -f, --fstab             Read entries from /etc/fstab of mounted device
                            / (root) must be mounted before
    -m, --mountpoint=DIR    Directory as mount point for / (root)

Common options:
    -r, --profile=PROFILE   Base name of profile, searched at PROFILEPATH.
                            Content is embedded in order of command options,
    -v, --verbose           Display additional infos to STDERR
    -l, --last              Print parameters of last mount options after processing
                            as preset for a new profile
    -h, --help              Print this help and exit
        --version           Print version of $PROGNAME and exit

Automounting of / (root):

The first valid mount can be setup by an option or be set automatically, if following conditions are met:

- GPT partitioning is used
- One has a partition type "SD_GPT_ROOT*" (the related UUID) set
- If more than one partition have been marked as ROOT partition, the first partition is used

Some information about partition types can be found at:
https://uapi-group.org/specifications/specs/discoverable_partitions_specification/

Possible entries for MDESCR:

PARTLABEL=<label>:<mount point>
	label:          label of partition (only GPT, fallback to LABEL)
	mount point: 	mount point at system image, e.g. / or /home or /bin, etc.

LABEL=<label>:<mount point>
	label:          label of file system
	mount point:    mount point at system image

UUID=<id>:<mount point>
	id:             uuid of file system
	mount point:    mount point at system image

PARTUUID=<id>:<mount point>
	id:             uuid of partition> (only GPT)
	mount point:    mount point at system image

PARTNR=<id>:<mount point>
	id:             simply the partition number
	mount point:    mount point at system image

A profile is stored at a file with same name at one of the locations at PROFILEPATH:
$(printf "\t%s\n" "${PROFILEBASES[@]}")

Each profile can set all mount options and another profiles, but each profile can only be loaded once.

Example of profile:
-p PARTLABEL=system:/
-p PARTLABEL=general_storage:/home
-p PARTLABEL=boot:/boot
-p PARTLABEL=EFI:/boot/efi
-p PARTLABEL=firmware:/boot/firmware

Some examples to call the command $PROGNAME:

$PROGNAME -p PARTLABEL=system:/ -p PARTLABEL=general_storage:/home -p ... -m /mnt/rootfs /dev/sdx

$PROGNAME -p PARTLABEL=system:/ -f -m /mnt/rootfs /dev/sdx

$PROGNAME -u -p PARTLABEL=system:/ --fstab -m /mnt/rootfs system.img

$PROGNAME -u /mnt/rootfs

$PROGNAME -r apertis -m /mnt/rootfs /dev/sdx

$PROGNAME -f -m /mnt/rootfs system.img # only if a partition is marked as ROOT partition)


HeredocDelimiter

}

#######################################
# provides the partition type for given partition
# Globals:
#   ROOT_GUID_TABLE
# Arguments:
#   $1 = device of partition (loop| block)
# Outputs:
#   Writes partition type to stdout
#######################################

function get_partition_type() {
local PARTITION_DEVICE=$1
local partition_device_parttype_uuid
local partition_device_parttype

  partition_device_parttype_uuid=$(lsblk -n -p -o PARTTYPE $PARTITION_DEVICE)
  if [ -n "$partition_device_parttype_uuid" ]; then
    partition_device_parttype="${ROOT_GUID_TABLE[$partition_device_parttype_uuid]}"
  fi
  echo -n "$partition_device_parttype"
}

#######################################
# provides a list of partition devices with SD_GPT_ROOT* at its partition type
# Arguments:
#   $1 = image / loop device
#   $2 = image / loop device with 'p' for loop devices
# Outputs:
#   Writes list of partition devices
#######################################

function get_root_partitions() {
local IMAGE_DEVICE=$1
local IMAGE_DEVICE_P=$2
local partition_device_parttype

  print_verbose_line "Get partition types of $IMAGE_DEVICE (* are possible root partitions):"
  for partition_device in ${IMAGE_DEVICE_P}?*
  do
    partition_device_parttype=$(get_partition_type $partition_device)
    if echo "$partition_device_parttype" | grep -q '^SD_GPT_ROOT'; then
      print_verbose_line "* $partition_device:$partition_device_parttype"
      echo "$partition_device"
    else
      print_verbose_line "  $partition_device:$partition_device_parttype"
    fi
  done
}

#######################################
# checks root mount and tries to mount it automatically my partition type
# Arguments:
#   $1 = image / loop device
#   $2 = image / loop device with 'p' for loop devices
#######################################

function check_and_try_to_mount_root_partition() {
local IMAGE_DEVICE=$1
local IMAGE_DEVICE_P=$2
local root_mountpoint
local root_devices=()
local size
local id

  root_mountpoint=$(findmnt "${CMD_MOUNTPOINT}" -o TARGET  -n)
  if [ -z "${root_mountpoint}" ];then
    root_devices=( $(get_root_partitions ${IMAGE_DEVICE} ${IMAGE_DEVICE_P}) )
    size=${#root_devices[@]}
    if [ "$size" -eq "0" ]; then
      echo "/ is not mounted for $IMAGE_DEVICE, can't handle sub mounts"
      mdevice=''
      mbind=''
    else
      if [ "$size" -gt "1" ]; then
        print_error_line "There is more than one root partition at device"
        for id in "${root_devices[@]}"; do
          print_error_line "  $id"
        done
        print_error_line "Using ${root_devices[0]}"
      fi
      print_verbose_line "Mounting root partition ${root_devices[0]} at ${CMD_MOUNTPOINT}/"
      mount "${root_devices[0]}" "${CMD_MOUNTPOINT}/"
      check_return_code $? $LINENO
    fi
    root_mountpoint=$(findmnt "${CMD_MOUNTPOINT}" -o TARGET  -n)
  fi
  echo "$root_mountpoint"
}



#######################################
# Searchs for the filename of a profile at a given search path
# Globals:
#   PROFILEBASES
# Arguments:
#   $1 = Flag set to 'y' to search for existing file
#   $2 = Basename of profile
# Outputs:
#   Writes path of profile to stdout
#######################################
get_filename_from_profile_id () {
local PROFILE_HAVE2EXIST="$1"
local profile="$2"
local profilepath

  for pbasedir in "${PROFILEBASES[@]}"; do
    # echo "PF=${pbasedir}/$profile"
    if [ "$PROFILE_HAVE2EXIST" == "n" ] || \
       [ -f "${pbasedir}/$profile" ]; then
      profilepath="${pbasedir}/$profile"
      echo "$profilepath"
      return
    fi
  done
}

#######################################
# Parses the options at the command line and profiles.
# Globals:
#   LONG
#   SHORT
#   PROFILEBASES
#   CMD_PATH_DESCRIPTORS()
#   CMD_MOUNTPOINT
#   CMD_VERBOSE_OPTION_SET
#   CMD_IMAGE_DEVICE
#
# Arguments:
#   $@ = Command line
#######################################
function parse_command_line () {
local parsed

#options
#h|help|?: help
#p|path: path
#r|profile: profile
#m|CMD_MOUNTPOINT: mount point
#v:CMD_VERBOSE_OPTION_SET

  parsed=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`

  if [[ $? != 0 ]]; then
      exit 2
  fi
  eval set -- "$parsed"

  while true; do
      case "$1" in
          -h|--help)
              print_help
              shift
              exit 0
              ;;
          -p|--path)
              CMD_PATH_DESCRIPTORS+=("$2")
              CMD_LAST_PARAMETERS+=("$1 $2")
              shift 2
              ;;
          -f|--fstab)
              CMD_PATH_DESCRIPTORS+=("FSTAB")
              CMD_LAST_PARAMETERS+=("$1")
              shift
              ;;
          -m|--mountpoint)
              CMD_MOUNTPOINT="$2"
              CMD_LAST_PARAMETERS+=("$1 $2")
              shift 2
              ;;
          -r|--profile)
              profile="$2"
              shift 2
              if [ -n "${LOADED_PROFILES[$profile]}" ]; then
                print_error_line "Profiles can't be loaded multiple times ($profile)"
                exit 1
              else
                print_verbose_line "Reading profile $profile"
                LOADED_PROFILES[$profile]='y'
                profilepath=$(get_filename_from_profile_id y "$profile")
                if [ -n "$profilepath" ]; then
                  local xcmd
                  xcmd=($(cat $profilepath))
                  parse_command_line "${xcmd[@]}"
                else
                  print_error_line "Can't find $profile at ${PROFILEBASES[@]}"
                  exit 1
                fi
              fi
              ;;
          -v|--verbose)
              CMD_VERBOSE_OPTION_SET=y
              shift
              ;;
          -u|--umount)
              CMD_UMOUNT_OPTION_SET=y
              shift
              ;;
          -l|--last)
              CMD_PRINT_LAST_OPTION_SET=y
              shift
              ;;
          --version)
              echo "$(basename $0) $VERSION ($VERSIONDATE)"
              shift
              exit 0
              ;;
          --)
              shift
              break
              ;;
          *)
              echo "Programming error \|$1\|"
              exit 3
              ;;
      esac
  done

  if [[ $# -gt 1 ]]; then
    echo "Wrong parameters $@"
  elif [[ $# -eq 1 ]]; then
    if [ -z "$CMD_PATH_DESCRIPTORS" ]; then
      CMD_MOUNTPOINT="$1"
    else
      CMD_IMAGE_DEVICE="$1"
    fi
  fi

}

#######################################
# Gets the block device /dev/... of a partition for a given file system LABEL, but only
# restricted to a disk device.
# Arguments:
#   Disk device
#   File system label
# Outputs:
#   Writes block device to stdout
#######################################
function get_device_from_label() {

local devp=$1
local label=$2
local sdev
local sdev_label

  for sdev in ${devp}*
  do
    sdev_label=$(blkid -s LABEL -o value $sdev)
    if test "$sdev_label" = "$label"; then
      echo $sdev
      return
    fi
  done
}

#######################################
# Gets the block device /dev/... of a partition for a given partition label (only gpt)
# but only restricted to a disk device.
# Arguments:
#   Disk device
#   Partition label
# Outputs:
#   Writes block device to stdout
#######################################
function get_device_from_partlabel() {

local devp=$1
local label=$2
local sdev
local sdev_label

  for sdev in ${devp}*
  do
    sdev_label=$(blkid -s PARTLABEL -o value $sdev)
    if test "$sdev_label" = "$label"; then
      echo $sdev
      return
    fi
  done
}

#######################################
# Gets the block device /dev/... of a partition for a uuid of file system
# but only restricted to a disk device.
# Arguments:
#   Disk device
#   Uuid id of file system
# Outputs:
#   Writes block device to stdout
#######################################
function get_device_from_uuid() {

local devp=$1
local label=$2
local sdev
local sdev_label

  for sdev in ${devp}*
  do
    sdev_label=$(blkid -s UUID -o value $sdev)
    if test "$sdev_label" = "$label"; then
      echo $sdev
      return
    fi
  done
}

#######################################
# Gets the block device /dev/... of a partition for a given parttion uuid (only gpt)
# but only restricted to a disk device.
# Arguments:
#   Disk device
#   Partition uuid
# Outputs:
#   Writes block device to stdout
#######################################
function get_device_from_partuuid() {

local devp=$1
local label=$2
local sdev
local sdev_label

  for sdev in ${devp}*
  do
    sdev_label=$(blkid -s PARTUUID -o value $sdev)
    if test "$sdev_label" = "$label"; then
      echo $sdev
      return
    fi
  done
}
#######################################
# Analyses given FSTAB file to find additional mounts
# Arguments:
#   Path to FSTAB file
# Outputs:
#   Writes -p|--path rules to stdout to embedd at mount sequence
#######################################
function get_descriptor_from_fstab()
{
local FSTAB=$1
local  mountdescr mountpoint fstype options S1 S2

  print_verbose_line "Reading FSTAB at $1"
  while read -r mountdescr mountpoint fstype options S1 S2
  do
  #  partnr=$(echo $LINE|perl -ne 'print "$1\n" if /#\s+generated\s+by\s+\w+.sh\s+([^\s]+)\s+([^\s]+)/')
    if ! echo $mountdescr | grep -q '^[[:blank:]]*#' && test -n "$options"; then
      if test "$mountpoint" != "/"; then
        if  echo $options | grep -q '\bbind\b'; then
          echo -n "BIND=$mountdescr:$mountpoint "
        else
          echo -n "$mountdescr:$mountpoint "
        fi
      fi
    fi
  done < "$FSTAB"
  echo
}

#######################################
# Mounts an entry -p|--path of given block device to intended mount point
# Globals:
#   CMD_MOUNTPOINT
# Arguments:
#   loop / block device
#   loopxp / block device
#   Entry, given by -p|--path option
# Outputs:
#   Writes used commands to stdout
#######################################
function mount_with_descriptor()
{
local device=$1
local devicep=$2
local entry=$3
local descr labelpath idtype idvalue mdevice
local mbind rootmnt

  IFS=: read -r descr labelpath <<< "$entry"
  IFS=\= read -r idtype idvalue <<< "$descr"
  if test "$idtype" = "PARTLABEL"; then
    mdevice=$(get_device_from_partlabel ${devicep} ${idvalue})
    if [ -z "$mdevice" ]; then
      mdevice=$(get_device_from_label ${devicep} ${idvalue})
      if [ -n "$mdevice" ]; then
        echo "Using LABEL instead of PARTLABEL for ${idvalue} at ${mdevice}"
      fi
    fi
  elif test "$idtype" = "LABEL"; then
    mdevice=$(get_device_from_label ${devicep} ${idvalue})
  elif test "$idtype" = "UUID"; then
    mdevice=$(get_device_from_uuid ${devicep} ${idvalue})
  elif test "$idtype" = "PARTUUID"; then
    mdevice=$(get_device_from_partuuid ${devicep} ${idvalue})
  elif test "$idtype" = "BIND"; then
    mbind=${idvalue}
    mdevice=
  elif test "$idtype" = "PARTNR"; then
    mdevice="${devicep}${idvalue}"
  else
    print_error_line "Can't understand $\"$descr\"\n"
    exit 1
  fi
  if test "$labelpath" != "/"; then
    rootmnt=$(check_and_try_to_mount_root_partition $device $devicep)
    if [ -z "${rootmnt}" ];then
      echo "/ is not mounted for $device, can't handle sub mounts"
      mdevice=''
      mbind=''
    fi
  fi
  if [ -n "${mdevice}" ] || [ -n "${mbind}" ]; then
    if [ ! -d "${CMD_MOUNTPOINT}$labelpath" ]; then
      mkdir -p "${CMD_MOUNTPOINT}$labelpath"
      check_return_code $? $LINENO
    fi
    # if not already mounted
    if ! findmnt "${CMD_MOUNTPOINT}$labelpath" -o TARGET  -n > /dev/null; then
      if [ -n "${mdevice}" ] ; then
        print_verbose_line "Mounting partition ${mdevice} at ${CMD_MOUNTPOINT}$labelpath"
        mount "${mdevice}" "${CMD_MOUNTPOINT}$labelpath"
        check_return_code $? $LINENO
      else
        print_verbose_line "Binding directory ${CMD_MOUNTPOINT}$mbind at ${CMD_MOUNTPOINT}$labelpath"
        mount -o bind "${CMD_MOUNTPOINT}$mbind" "${CMD_MOUNTPOINT}$labelpath"
        check_return_code $? $LINENO
      fi
    fi
  fi
}

# Start of main program, analyse the parameters

# Parse the command line

parse_command_line "$@"

# Print some parameters at verbose option

print_verbose_line "Parameters:"
print_verbose_line "  Mount point=$CMD_MOUNTPOINT"
print_verbose_line "  Image device:$CMD_IMAGE_DEVICE"
print_verbose_line "  Umount before further processing:$CMD_UMOUNT_OPTION_SET"
for i in "${!CMD_PATH_DESCRIPTORS[@]}"; do
  print_verbose_line "  "$(printf '${CMD_PATH_DESCRIPTORS[%s]}=%s\n' "$i" "${CMD_PATH_DESCRIPTORS[i]}")
done
print_verbose_line "Last parameters:${CMD_LAST_PARAMETERS[@]}"

# Check a given mount point

if [ ! -d "$CMD_MOUNTPOINT" ]; then
  print_error_line "Provide a valid mount point (given \"$CMD_MOUNTPOINT\")"
  exit 1
fi

# Start of processing the command line parameters

# Umount all mounted partitions and bound directories before mounting the device/image 

if test "$CMD_UMOUNT_OPTION_SET" = 'y'; then
 
  # search for a mounted device for the mount point
  system_dev=$(findmnt "$CMD_MOUNTPOINT" -o SOURCE  -n)
  if test -n "${system_dev}"; then
  
    # unmount all devices at mount point and sub directories
    for mountpoint in $(findmnt -R "${CMD_MOUNTPOINT}" -o TARGET  -n | tac | perl -ne 'print "$1\n" if /(\/.*)/') ;
    do
      print_verbose_line "Unmounting ${mountpoint}"
      umount "${mountpoint}"
      check_return_code $? $LINENO
      sync
    done
    device=$(echo ${system_dev} |perl -ne 'print "$1\n" if /(\/dev\/\w+?)p?\d+\Z/')
    loop_dev=$(echo ${system_dev} |perl -ne 'print "$1\n" if /(\/dev\/loop\d+).*\Z/')
  else
    loop_dev=$(echo ${device} |perl -ne 'print "$1\n" if /(\/dev\/loop\d+).*\Z/')
  fi
  # release the loop device 
  if test -n "${loop_dev}" ; then
    print_verbose_line "Deleting loop device:${loop_dev}"
    image=$(losetup -a|perl -ne 'print "$1\n" if /''\((.+?)\)/')
    check_return_code $? $LINENO
    losetup -d ${loop_dev}
    check_return_code $? $LINENO
  else
    image=
  fi
fi
# if some device/image has to be mounted
if [ -n "$CMD_PATH_DESCRIPTORS" ]; then
  if [ -b "$CMD_IMAGE_DEVICE" ]; then
  # if a block device is given
    print_verbose_line "Block device: $CMD_IMAGE_DEVICE"
    device=$CMD_IMAGE_DEVICE
    devicep=$device
    image=
    system_dev=
    #  partprobe has to be called
    partprobe ${device} &> /dev/null
    check_return_code $? $LINENO
  elif [ -f "$CMD_IMAGE_DEVICE" ]; then
    # if an image file is given
    # Check if the related loop device can be reused at incremental call of command
    system_dev=$(findmnt "${CMD_MOUNTPOINT}" -o SOURCE  -n)
    if [ -n "$system_dev" ]; then
      device=$(echo ${system_dev} |perl -ne 'print "$1\n" if /(\/dev\/\w+?)p?\d+\Z/')
    else
      # otherwise create a new loop device
      device=$(losetup -f)
      check_return_code $? $LINENO
      print_verbose_line "Image file $CMD_IMAGE_DEVICE setup at ${device}"
      losetup -P ${device} "$CMD_IMAGE_DEVICE"
      check_return_code $? $LINENO
      # here a sleep has to be set, because PARTTYPE can't be get immediately after setup of loop device
      sleep 1
    fi
    devicep="${device}p"
    image="$CMD_IMAGE_DEVICE"
    system_dev=
  else
    print_error_line "Provide a valid device/image file (given \"$CMD_IMAGE_DEVICE\")"
    exit 1
  fi
  # Apply all given path descriptors to given image file / device
  if test -n "${devicep}"; then
    for str in ${CMD_PATH_DESCRIPTORS[@]}; do
      if test "$str" != "FSTAB"; then
        mount_with_descriptor "$device" "$devicep" "$str"
      else
        # try to use /etc/fstab of root partition, optionally mount it by detection of partition type 
        rootmnt=$(check_and_try_to_mount_root_partition $device $devicep)
        imagedescr_par_fstab=$(get_descriptor_from_fstab "$CMD_MOUNTPOINT"/etc/fstab)
        for str2 in ${imagedescr_par_fstab[@]}; do
          mount_with_descriptor "$device" "$devicep"  "$str2"
        done
      fi
    done
  fi
fi

# End of processing

if [ -n "$CMD_PRINT_LAST_OPTION_SET" ]; then
  echo "Last profile is:"
  for param in "${CMD_LAST_PARAMETERS[@]}"; do
    echo "$param"
  done
fi
